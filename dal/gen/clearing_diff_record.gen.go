// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormCollection/dal/model"
)

func newClearingDiffRecord(db *gorm.DB, opts ...gen.DOOption) clearingDiffRecord {
	_clearingDiffRecord := clearingDiffRecord{}

	_clearingDiffRecord.clearingDiffRecordDo.UseDB(db, opts...)
	_clearingDiffRecord.clearingDiffRecordDo.UseModel(&model.ClearingDiffRecord{})

	tableName := _clearingDiffRecord.clearingDiffRecordDo.TableName()
	_clearingDiffRecord.ALL = field.NewAsterisk(tableName)
	_clearingDiffRecord.ClearingDiffRecordID = field.NewString(tableName, "clearing_diff_record_id")
	_clearingDiffRecord.ClearingReconciliationResult = field.NewString(tableName, "clearing_reconciliation_result")
	_clearingDiffRecord.ClearingReconciliationPipeID = field.NewString(tableName, "clearing_reconciliation_pipe_id")
	_clearingDiffRecord.TransactionType = field.NewString(tableName, "transaction_type")
	_clearingDiffRecord.OrderTime = field.NewTime(tableName, "order_time")
	_clearingDiffRecord.ChannelReferenceID = field.NewString(tableName, "channel_reference_id")
	_clearingDiffRecord.ChannelDealID = field.NewString(tableName, "channel_deal_id")
	_clearingDiffRecord.ClearingRecordAmount = field.NewString(tableName, "clearing_record_amount")
	_clearingDiffRecord.ChannelClearingRecordAmount = field.NewString(tableName, "channel_clearing_record_amount")
	_clearingDiffRecord.DiffAmount = field.NewString(tableName, "diff_amount")
	_clearingDiffRecord.ComparisonResult = field.NewString(tableName, "comparison_result")
	_clearingDiffRecord.ProcessedAmount = field.NewString(tableName, "processed_amount")
	_clearingDiffRecord.UnprocessedAmount = field.NewString(tableName, "unprocessed_amount")
	_clearingDiffRecord.ClearingReconciliationBatchID = field.NewString(tableName, "clearing_reconciliation_batch_id")
	_clearingDiffRecord.ClearingRecordCurrency = field.NewString(tableName, "clearing_record_currency")
	_clearingDiffRecord.ChannelClearingRecordCurrency = field.NewString(tableName, "channel_clearing_record_currency")
	_clearingDiffRecord.RecordStatus = field.NewString(tableName, "record_status")
	_clearingDiffRecord.CreateTime = field.NewTime(tableName, "create_time")
	_clearingDiffRecord.FinishedTime = field.NewString(tableName, "finished_time")
	_clearingDiffRecord.Operator = field.NewString(tableName, "operator")
	_clearingDiffRecord.Remark = field.NewString(tableName, "remark")
	_clearingDiffRecord.Age = field.NewInt32(tableName, "age")
	_clearingDiffRecord.AgeLevel = field.NewString(tableName, "age_level")
	_clearingDiffRecord.ChannelID = field.NewString(tableName, "channel_id")
	_clearingDiffRecord.ClearingRecordID = field.NewString(tableName, "clearing_record_id")
	_clearingDiffRecord.ChannelClearingRecordID = field.NewString(tableName, "channel_clearing_record_id")
	_clearingDiffRecord.UpdateTime = field.NewTime(tableName, "update_time")

	_clearingDiffRecord.fillFieldMap()

	return _clearingDiffRecord
}

type clearingDiffRecord struct {
	clearingDiffRecordDo clearingDiffRecordDo

	ALL                           field.Asterisk
	ClearingDiffRecordID          field.String // 清算差异单据编号
	ClearingReconciliationResult  field.String // 清算对账结果
	ClearingReconciliationPipeID  field.String // 清算通道
	TransactionType               field.String // 支付类型
	OrderTime                     field.Time   // 支付时间
	ChannelReferenceID            field.String // 我方清算流水号
	ChannelDealID                 field.String // 渠道清算流水号
	ClearingRecordAmount          field.String // 我方清算金额
	ChannelClearingRecordAmount   field.String // 渠道清算金额
	DiffAmount                    field.String // 差异金额
	ComparisonResult              field.String // 比较结果
	ProcessedAmount               field.String // 已处理金额
	UnprocessedAmount             field.String // 待处理金额
	ClearingReconciliationBatchID field.String // 清算对账批次号
	ClearingRecordCurrency        field.String // 渠道清算币种
	ChannelClearingRecordCurrency field.String // 渠道清算币种
	RecordStatus                  field.String // 单据状态
	CreateTime                    field.Time   // 单据生成时间
	FinishedTime                  field.String // 完结时间
	Operator                      field.String // 操作员
	Remark                        field.String // 我方摘要
	Age                           field.Int32  // 账龄
	AgeLevel                      field.String // 账龄等级
	ChannelID                     field.String // 渠道id
	ClearingRecordID              field.String // 我方流水id
	ChannelClearingRecordID       field.String // 渠道流水id
	UpdateTime                    field.Time

	fieldMap map[string]field.Expr
}

func (c clearingDiffRecord) Table(newTableName string) *clearingDiffRecord {
	c.clearingDiffRecordDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c clearingDiffRecord) As(alias string) *clearingDiffRecord {
	c.clearingDiffRecordDo.DO = *(c.clearingDiffRecordDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *clearingDiffRecord) updateTableName(table string) *clearingDiffRecord {
	c.ALL = field.NewAsterisk(table)
	c.ClearingDiffRecordID = field.NewString(table, "clearing_diff_record_id")
	c.ClearingReconciliationResult = field.NewString(table, "clearing_reconciliation_result")
	c.ClearingReconciliationPipeID = field.NewString(table, "clearing_reconciliation_pipe_id")
	c.TransactionType = field.NewString(table, "transaction_type")
	c.OrderTime = field.NewTime(table, "order_time")
	c.ChannelReferenceID = field.NewString(table, "channel_reference_id")
	c.ChannelDealID = field.NewString(table, "channel_deal_id")
	c.ClearingRecordAmount = field.NewString(table, "clearing_record_amount")
	c.ChannelClearingRecordAmount = field.NewString(table, "channel_clearing_record_amount")
	c.DiffAmount = field.NewString(table, "diff_amount")
	c.ComparisonResult = field.NewString(table, "comparison_result")
	c.ProcessedAmount = field.NewString(table, "processed_amount")
	c.UnprocessedAmount = field.NewString(table, "unprocessed_amount")
	c.ClearingReconciliationBatchID = field.NewString(table, "clearing_reconciliation_batch_id")
	c.ClearingRecordCurrency = field.NewString(table, "clearing_record_currency")
	c.ChannelClearingRecordCurrency = field.NewString(table, "channel_clearing_record_currency")
	c.RecordStatus = field.NewString(table, "record_status")
	c.CreateTime = field.NewTime(table, "create_time")
	c.FinishedTime = field.NewString(table, "finished_time")
	c.Operator = field.NewString(table, "operator")
	c.Remark = field.NewString(table, "remark")
	c.Age = field.NewInt32(table, "age")
	c.AgeLevel = field.NewString(table, "age_level")
	c.ChannelID = field.NewString(table, "channel_id")
	c.ClearingRecordID = field.NewString(table, "clearing_record_id")
	c.ChannelClearingRecordID = field.NewString(table, "channel_clearing_record_id")
	c.UpdateTime = field.NewTime(table, "update_time")

	c.fillFieldMap()

	return c
}

func (c *clearingDiffRecord) WithContext(ctx context.Context) IClearingDiffRecordDo {
	return c.clearingDiffRecordDo.WithContext(ctx)
}

func (c clearingDiffRecord) TableName() string { return c.clearingDiffRecordDo.TableName() }

func (c clearingDiffRecord) Alias() string { return c.clearingDiffRecordDo.Alias() }

func (c *clearingDiffRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *clearingDiffRecord) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 27)
	c.fieldMap["clearing_diff_record_id"] = c.ClearingDiffRecordID
	c.fieldMap["clearing_reconciliation_result"] = c.ClearingReconciliationResult
	c.fieldMap["clearing_reconciliation_pipe_id"] = c.ClearingReconciliationPipeID
	c.fieldMap["transaction_type"] = c.TransactionType
	c.fieldMap["order_time"] = c.OrderTime
	c.fieldMap["channel_reference_id"] = c.ChannelReferenceID
	c.fieldMap["channel_deal_id"] = c.ChannelDealID
	c.fieldMap["clearing_record_amount"] = c.ClearingRecordAmount
	c.fieldMap["channel_clearing_record_amount"] = c.ChannelClearingRecordAmount
	c.fieldMap["diff_amount"] = c.DiffAmount
	c.fieldMap["comparison_result"] = c.ComparisonResult
	c.fieldMap["processed_amount"] = c.ProcessedAmount
	c.fieldMap["unprocessed_amount"] = c.UnprocessedAmount
	c.fieldMap["clearing_reconciliation_batch_id"] = c.ClearingReconciliationBatchID
	c.fieldMap["clearing_record_currency"] = c.ClearingRecordCurrency
	c.fieldMap["channel_clearing_record_currency"] = c.ChannelClearingRecordCurrency
	c.fieldMap["record_status"] = c.RecordStatus
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["finished_time"] = c.FinishedTime
	c.fieldMap["operator"] = c.Operator
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["age"] = c.Age
	c.fieldMap["age_level"] = c.AgeLevel
	c.fieldMap["channel_id"] = c.ChannelID
	c.fieldMap["clearing_record_id"] = c.ClearingRecordID
	c.fieldMap["channel_clearing_record_id"] = c.ChannelClearingRecordID
	c.fieldMap["update_time"] = c.UpdateTime
}

func (c clearingDiffRecord) clone(db *gorm.DB) clearingDiffRecord {
	c.clearingDiffRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c clearingDiffRecord) replaceDB(db *gorm.DB) clearingDiffRecord {
	c.clearingDiffRecordDo.ReplaceDB(db)
	return c
}

type clearingDiffRecordDo struct{ gen.DO }

type IClearingDiffRecordDo interface {
	gen.SubQuery
	Debug() IClearingDiffRecordDo
	WithContext(ctx context.Context) IClearingDiffRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IClearingDiffRecordDo
	WriteDB() IClearingDiffRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IClearingDiffRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IClearingDiffRecordDo
	Not(conds ...gen.Condition) IClearingDiffRecordDo
	Or(conds ...gen.Condition) IClearingDiffRecordDo
	Select(conds ...field.Expr) IClearingDiffRecordDo
	Where(conds ...gen.Condition) IClearingDiffRecordDo
	Order(conds ...field.Expr) IClearingDiffRecordDo
	Distinct(cols ...field.Expr) IClearingDiffRecordDo
	Omit(cols ...field.Expr) IClearingDiffRecordDo
	Join(table schema.Tabler, on ...field.Expr) IClearingDiffRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IClearingDiffRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IClearingDiffRecordDo
	Group(cols ...field.Expr) IClearingDiffRecordDo
	Having(conds ...gen.Condition) IClearingDiffRecordDo
	Limit(limit int) IClearingDiffRecordDo
	Offset(offset int) IClearingDiffRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IClearingDiffRecordDo
	Unscoped() IClearingDiffRecordDo
	Create(values ...*model.ClearingDiffRecord) error
	CreateInBatches(values []*model.ClearingDiffRecord, batchSize int) error
	Save(values ...*model.ClearingDiffRecord) error
	First() (*model.ClearingDiffRecord, error)
	Take() (*model.ClearingDiffRecord, error)
	Last() (*model.ClearingDiffRecord, error)
	Find() ([]*model.ClearingDiffRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClearingDiffRecord, err error)
	FindInBatches(result *[]*model.ClearingDiffRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ClearingDiffRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IClearingDiffRecordDo
	Assign(attrs ...field.AssignExpr) IClearingDiffRecordDo
	Joins(fields ...field.RelationField) IClearingDiffRecordDo
	Preload(fields ...field.RelationField) IClearingDiffRecordDo
	FirstOrInit() (*model.ClearingDiffRecord, error)
	FirstOrCreate() (*model.ClearingDiffRecord, error)
	FindByPage(offset int, limit int) (result []*model.ClearingDiffRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IClearingDiffRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c clearingDiffRecordDo) Debug() IClearingDiffRecordDo {
	return c.withDO(c.DO.Debug())
}

func (c clearingDiffRecordDo) WithContext(ctx context.Context) IClearingDiffRecordDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c clearingDiffRecordDo) ReadDB() IClearingDiffRecordDo {
	return c.Clauses(dbresolver.Read)
}

func (c clearingDiffRecordDo) WriteDB() IClearingDiffRecordDo {
	return c.Clauses(dbresolver.Write)
}

func (c clearingDiffRecordDo) Session(config *gorm.Session) IClearingDiffRecordDo {
	return c.withDO(c.DO.Session(config))
}

func (c clearingDiffRecordDo) Clauses(conds ...clause.Expression) IClearingDiffRecordDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c clearingDiffRecordDo) Returning(value interface{}, columns ...string) IClearingDiffRecordDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c clearingDiffRecordDo) Not(conds ...gen.Condition) IClearingDiffRecordDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c clearingDiffRecordDo) Or(conds ...gen.Condition) IClearingDiffRecordDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c clearingDiffRecordDo) Select(conds ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c clearingDiffRecordDo) Where(conds ...gen.Condition) IClearingDiffRecordDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c clearingDiffRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IClearingDiffRecordDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c clearingDiffRecordDo) Order(conds ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c clearingDiffRecordDo) Distinct(cols ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c clearingDiffRecordDo) Omit(cols ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c clearingDiffRecordDo) Join(table schema.Tabler, on ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c clearingDiffRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c clearingDiffRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c clearingDiffRecordDo) Group(cols ...field.Expr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c clearingDiffRecordDo) Having(conds ...gen.Condition) IClearingDiffRecordDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c clearingDiffRecordDo) Limit(limit int) IClearingDiffRecordDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c clearingDiffRecordDo) Offset(offset int) IClearingDiffRecordDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c clearingDiffRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IClearingDiffRecordDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c clearingDiffRecordDo) Unscoped() IClearingDiffRecordDo {
	return c.withDO(c.DO.Unscoped())
}

func (c clearingDiffRecordDo) Create(values ...*model.ClearingDiffRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c clearingDiffRecordDo) CreateInBatches(values []*model.ClearingDiffRecord, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c clearingDiffRecordDo) Save(values ...*model.ClearingDiffRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c clearingDiffRecordDo) First() (*model.ClearingDiffRecord, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearingDiffRecord), nil
	}
}

func (c clearingDiffRecordDo) Take() (*model.ClearingDiffRecord, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearingDiffRecord), nil
	}
}

func (c clearingDiffRecordDo) Last() (*model.ClearingDiffRecord, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearingDiffRecord), nil
	}
}

func (c clearingDiffRecordDo) Find() ([]*model.ClearingDiffRecord, error) {
	result, err := c.DO.Find()
	return result.([]*model.ClearingDiffRecord), err
}

func (c clearingDiffRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ClearingDiffRecord, err error) {
	buf := make([]*model.ClearingDiffRecord, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c clearingDiffRecordDo) FindInBatches(result *[]*model.ClearingDiffRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c clearingDiffRecordDo) Attrs(attrs ...field.AssignExpr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c clearingDiffRecordDo) Assign(attrs ...field.AssignExpr) IClearingDiffRecordDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c clearingDiffRecordDo) Joins(fields ...field.RelationField) IClearingDiffRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c clearingDiffRecordDo) Preload(fields ...field.RelationField) IClearingDiffRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c clearingDiffRecordDo) FirstOrInit() (*model.ClearingDiffRecord, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearingDiffRecord), nil
	}
}

func (c clearingDiffRecordDo) FirstOrCreate() (*model.ClearingDiffRecord, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ClearingDiffRecord), nil
	}
}

func (c clearingDiffRecordDo) FindByPage(offset int, limit int) (result []*model.ClearingDiffRecord, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c clearingDiffRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c clearingDiffRecordDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c clearingDiffRecordDo) Delete(models ...*model.ClearingDiffRecord) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *clearingDiffRecordDo) withDO(do gen.Dao) *clearingDiffRecordDo {
	c.DO = *do.(*gen.DO)
	return c
}
