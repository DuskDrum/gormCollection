// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gormCollection/dal/model"
)

func newChannelClearingRecord(db *gorm.DB, opts ...gen.DOOption) channelClearingRecord {
	_channelClearingRecord := channelClearingRecord{}

	_channelClearingRecord.channelClearingRecordDo.UseDB(db, opts...)
	_channelClearingRecord.channelClearingRecordDo.UseModel(&model.ChannelClearingRecord{})

	tableName := _channelClearingRecord.channelClearingRecordDo.TableName()
	_channelClearingRecord.ALL = field.NewAsterisk(tableName)
	_channelClearingRecord.ChannelClearingRecordID = field.NewString(tableName, "channel_clearing_record_id")
	_channelClearingRecord.ChannelID = field.NewString(tableName, "channel_id")
	_channelClearingRecord.ChannelDealID = field.NewString(tableName, "channel_deal_id")
	_channelClearingRecord.ChannelReferenceID = field.NewString(tableName, "channel_reference_id")
	_channelClearingRecord.ChannelClearingBatchNo = field.NewString(tableName, "channel_clearing_batch_no")
	_channelClearingRecord.Currency = field.NewString(tableName, "currency")
	_channelClearingRecord.Amount = field.NewString(tableName, "amount")
	_channelClearingRecord.ChannelSettlementCurrency = field.NewString(tableName, "channel_settlement_currency")
	_channelClearingRecord.ChannelSettlementAmount = field.NewString(tableName, "channel_settlement_amount")
	_channelClearingRecord.OrderStatus = field.NewString(tableName, "order_status")
	_channelClearingRecord.TransactionType = field.NewString(tableName, "transaction_type")
	_channelClearingRecord.ChannelOrderType = field.NewString(tableName, "channel_order_type")
	_channelClearingRecord.FundsReconciliationPipeID = field.NewString(tableName, "funds_reconciliation_pipe_id")
	_channelClearingRecord.ClearingReconciliationPipeID = field.NewString(tableName, "clearing_reconciliation_pipe_id")
	_channelClearingRecord.DoubleEntryFlag = field.NewString(tableName, "double_entry_flag")
	_channelClearingRecord.TransactionTime = field.NewTime(tableName, "transaction_time")
	_channelClearingRecord.ClearingReconciliationTime = field.NewTime(tableName, "clearing_reconciliation_time")
	_channelClearingRecord.CreateTime = field.NewTime(tableName, "create_time")
	_channelClearingRecord.UpdateTime = field.NewTime(tableName, "update_time")
	_channelClearingRecord.EstimateArriveMinDate = field.NewTime(tableName, "estimate_arrive_min_date")
	_channelClearingRecord.EstimateArriveMaxDate = field.NewTime(tableName, "estimate_arrive_max_date")
	_channelClearingRecord.StatementID = field.NewString(tableName, "statement_id")
	_channelClearingRecord.ClearingReconciliationStatus = field.NewString(tableName, "clearing_reconciliation_status")
	_channelClearingRecord.FundsReconciliationStatus = field.NewString(tableName, "funds_reconciliation_status")
	_channelClearingRecord.ClearingReconciliationResult = field.NewString(tableName, "clearing_reconciliation_result")
	_channelClearingRecord.RecordType = field.NewString(tableName, "record_type")
	_channelClearingRecord.Remark = field.NewString(tableName, "remark")
	_channelClearingRecord.FundsReconciliationBatch = field.NewString(tableName, "funds_reconciliation_batch")
	_channelClearingRecord.IdempotentID = field.NewString(tableName, "idempotent_id")
	_channelClearingRecord.Notes = field.NewString(tableName, "notes")
	_channelClearingRecord.PayoutCode = field.NewString(tableName, "payout_code")
	_channelClearingRecord.PayoutStatus = field.NewString(tableName, "payout_status")
	_channelClearingRecord.PayoutDate = field.NewTime(tableName, "payout_date")
	_channelClearingRecord.ClearingReconcileDetailResultID = field.NewString(tableName, "clearing_reconcile_detail_result_id")
	_channelClearingRecord.ChannelReconciliationDate = field.NewTime(tableName, "channel_reconciliation_date")
	_channelClearingRecord.MerchantID = field.NewString(tableName, "merchant_id")
	_channelClearingRecord.ChannelMerchantID = field.NewString(tableName, "channel_merchant_id")

	_channelClearingRecord.fillFieldMap()

	return _channelClearingRecord
}

type channelClearingRecord struct {
	channelClearingRecordDo channelClearingRecordDo

	ALL                             field.Asterisk
	ChannelClearingRecordID         field.String // 主键ID
	ChannelID                       field.String // 渠道标示
	ChannelDealID                   field.String // 渠道流水号（渠道订单号）
	ChannelReferenceID              field.String // 我方流水号（我方送渠道订单号）
	ChannelClearingBatchNo          field.String // 批次号channel code + 日期
	Currency                        field.String // 支付币种
	Amount                          field.String // 支付金额
	ChannelSettlementCurrency       field.String // 结算币种
	ChannelSettlementAmount         field.String // 结算金额
	OrderStatus                     field.String
	TransactionType                 field.String // 订单类型，支付，退款，CB，CB win等，渠道映射到我方的类型
	ChannelOrderType                field.String // 渠道原始订单类型
	FundsReconciliationPipeID       field.String // 资金对账通道
	ClearingReconciliationPipeID    field.String // 清算对账通道
	DoubleEntryFlag                 field.String // 复式记账，借：credit +，贷：debit  -
	TransactionTime                 field.Time   // 交易时间
	ClearingReconciliationTime      field.Time   // 清算对账时间
	CreateTime                      field.Time
	UpdateTime                      field.Time
	EstimateArriveMinDate           field.Time   // 预计最小到账日期
	EstimateArriveMaxDate           field.Time   // 预计最大到账日期
	StatementID                     field.String // 我方账单编号
	ClearingReconciliationStatus    field.String // 清算对账状态
	FundsReconciliationStatus       field.String // 资金对账状态
	ClearingReconciliationResult    field.String // 清算对账结果
	RecordType                      field.String // 清算类型 收单|外汇
	Remark                          field.String // 摘要
	FundsReconciliationBatch        field.String // 资金对账批次号
	IdempotentID                    field.String // 唯一幂等id：文件名+批次号+文件行号
	Notes                           field.String // 备注
	PayoutCode                      field.String // 渠道打款编码，checkout为mcc
	PayoutStatus                    field.String // 渠道打款状态: PAID已打款 UNPAID未打款
	PayoutDate                      field.Time   // 渠道打款日期
	ClearingReconcileDetailResultID field.String // 清算对账结果id
	ChannelReconciliationDate       field.Time   // 渠道清算时间
	MerchantID                      field.String // 商户id
	ChannelMerchantID               field.String // 渠道商户id

	fieldMap map[string]field.Expr
}

func (c channelClearingRecord) Table(newTableName string) *channelClearingRecord {
	c.channelClearingRecordDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c channelClearingRecord) As(alias string) *channelClearingRecord {
	c.channelClearingRecordDo.DO = *(c.channelClearingRecordDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *channelClearingRecord) updateTableName(table string) *channelClearingRecord {
	c.ALL = field.NewAsterisk(table)
	c.ChannelClearingRecordID = field.NewString(table, "channel_clearing_record_id")
	c.ChannelID = field.NewString(table, "channel_id")
	c.ChannelDealID = field.NewString(table, "channel_deal_id")
	c.ChannelReferenceID = field.NewString(table, "channel_reference_id")
	c.ChannelClearingBatchNo = field.NewString(table, "channel_clearing_batch_no")
	c.Currency = field.NewString(table, "currency")
	c.Amount = field.NewString(table, "amount")
	c.ChannelSettlementCurrency = field.NewString(table, "channel_settlement_currency")
	c.ChannelSettlementAmount = field.NewString(table, "channel_settlement_amount")
	c.OrderStatus = field.NewString(table, "order_status")
	c.TransactionType = field.NewString(table, "transaction_type")
	c.ChannelOrderType = field.NewString(table, "channel_order_type")
	c.FundsReconciliationPipeID = field.NewString(table, "funds_reconciliation_pipe_id")
	c.ClearingReconciliationPipeID = field.NewString(table, "clearing_reconciliation_pipe_id")
	c.DoubleEntryFlag = field.NewString(table, "double_entry_flag")
	c.TransactionTime = field.NewTime(table, "transaction_time")
	c.ClearingReconciliationTime = field.NewTime(table, "clearing_reconciliation_time")
	c.CreateTime = field.NewTime(table, "create_time")
	c.UpdateTime = field.NewTime(table, "update_time")
	c.EstimateArriveMinDate = field.NewTime(table, "estimate_arrive_min_date")
	c.EstimateArriveMaxDate = field.NewTime(table, "estimate_arrive_max_date")
	c.StatementID = field.NewString(table, "statement_id")
	c.ClearingReconciliationStatus = field.NewString(table, "clearing_reconciliation_status")
	c.FundsReconciliationStatus = field.NewString(table, "funds_reconciliation_status")
	c.ClearingReconciliationResult = field.NewString(table, "clearing_reconciliation_result")
	c.RecordType = field.NewString(table, "record_type")
	c.Remark = field.NewString(table, "remark")
	c.FundsReconciliationBatch = field.NewString(table, "funds_reconciliation_batch")
	c.IdempotentID = field.NewString(table, "idempotent_id")
	c.Notes = field.NewString(table, "notes")
	c.PayoutCode = field.NewString(table, "payout_code")
	c.PayoutStatus = field.NewString(table, "payout_status")
	c.PayoutDate = field.NewTime(table, "payout_date")
	c.ClearingReconcileDetailResultID = field.NewString(table, "clearing_reconcile_detail_result_id")
	c.ChannelReconciliationDate = field.NewTime(table, "channel_reconciliation_date")
	c.MerchantID = field.NewString(table, "merchant_id")
	c.ChannelMerchantID = field.NewString(table, "channel_merchant_id")

	c.fillFieldMap()

	return c
}

func (c *channelClearingRecord) WithContext(ctx context.Context) IChannelClearingRecordDo {
	return c.channelClearingRecordDo.WithContext(ctx)
}

func (c channelClearingRecord) TableName() string { return c.channelClearingRecordDo.TableName() }

func (c channelClearingRecord) Alias() string { return c.channelClearingRecordDo.Alias() }

func (c *channelClearingRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *channelClearingRecord) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 37)
	c.fieldMap["channel_clearing_record_id"] = c.ChannelClearingRecordID
	c.fieldMap["channel_id"] = c.ChannelID
	c.fieldMap["channel_deal_id"] = c.ChannelDealID
	c.fieldMap["channel_reference_id"] = c.ChannelReferenceID
	c.fieldMap["channel_clearing_batch_no"] = c.ChannelClearingBatchNo
	c.fieldMap["currency"] = c.Currency
	c.fieldMap["amount"] = c.Amount
	c.fieldMap["channel_settlement_currency"] = c.ChannelSettlementCurrency
	c.fieldMap["channel_settlement_amount"] = c.ChannelSettlementAmount
	c.fieldMap["order_status"] = c.OrderStatus
	c.fieldMap["transaction_type"] = c.TransactionType
	c.fieldMap["channel_order_type"] = c.ChannelOrderType
	c.fieldMap["funds_reconciliation_pipe_id"] = c.FundsReconciliationPipeID
	c.fieldMap["clearing_reconciliation_pipe_id"] = c.ClearingReconciliationPipeID
	c.fieldMap["double_entry_flag"] = c.DoubleEntryFlag
	c.fieldMap["transaction_time"] = c.TransactionTime
	c.fieldMap["clearing_reconciliation_time"] = c.ClearingReconciliationTime
	c.fieldMap["create_time"] = c.CreateTime
	c.fieldMap["update_time"] = c.UpdateTime
	c.fieldMap["estimate_arrive_min_date"] = c.EstimateArriveMinDate
	c.fieldMap["estimate_arrive_max_date"] = c.EstimateArriveMaxDate
	c.fieldMap["statement_id"] = c.StatementID
	c.fieldMap["clearing_reconciliation_status"] = c.ClearingReconciliationStatus
	c.fieldMap["funds_reconciliation_status"] = c.FundsReconciliationStatus
	c.fieldMap["clearing_reconciliation_result"] = c.ClearingReconciliationResult
	c.fieldMap["record_type"] = c.RecordType
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["funds_reconciliation_batch"] = c.FundsReconciliationBatch
	c.fieldMap["idempotent_id"] = c.IdempotentID
	c.fieldMap["notes"] = c.Notes
	c.fieldMap["payout_code"] = c.PayoutCode
	c.fieldMap["payout_status"] = c.PayoutStatus
	c.fieldMap["payout_date"] = c.PayoutDate
	c.fieldMap["clearing_reconcile_detail_result_id"] = c.ClearingReconcileDetailResultID
	c.fieldMap["channel_reconciliation_date"] = c.ChannelReconciliationDate
	c.fieldMap["merchant_id"] = c.MerchantID
	c.fieldMap["channel_merchant_id"] = c.ChannelMerchantID
}

func (c channelClearingRecord) clone(db *gorm.DB) channelClearingRecord {
	c.channelClearingRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c channelClearingRecord) replaceDB(db *gorm.DB) channelClearingRecord {
	c.channelClearingRecordDo.ReplaceDB(db)
	return c
}

type channelClearingRecordDo struct{ gen.DO }

type IChannelClearingRecordDo interface {
	gen.SubQuery
	Debug() IChannelClearingRecordDo
	WithContext(ctx context.Context) IChannelClearingRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChannelClearingRecordDo
	WriteDB() IChannelClearingRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChannelClearingRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChannelClearingRecordDo
	Not(conds ...gen.Condition) IChannelClearingRecordDo
	Or(conds ...gen.Condition) IChannelClearingRecordDo
	Select(conds ...field.Expr) IChannelClearingRecordDo
	Where(conds ...gen.Condition) IChannelClearingRecordDo
	Order(conds ...field.Expr) IChannelClearingRecordDo
	Distinct(cols ...field.Expr) IChannelClearingRecordDo
	Omit(cols ...field.Expr) IChannelClearingRecordDo
	Join(table schema.Tabler, on ...field.Expr) IChannelClearingRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChannelClearingRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChannelClearingRecordDo
	Group(cols ...field.Expr) IChannelClearingRecordDo
	Having(conds ...gen.Condition) IChannelClearingRecordDo
	Limit(limit int) IChannelClearingRecordDo
	Offset(offset int) IChannelClearingRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChannelClearingRecordDo
	Unscoped() IChannelClearingRecordDo
	Create(values ...*model.ChannelClearingRecord) error
	CreateInBatches(values []*model.ChannelClearingRecord, batchSize int) error
	Save(values ...*model.ChannelClearingRecord) error
	First() (*model.ChannelClearingRecord, error)
	Take() (*model.ChannelClearingRecord, error)
	Last() (*model.ChannelClearingRecord, error)
	Find() ([]*model.ChannelClearingRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChannelClearingRecord, err error)
	FindInBatches(result *[]*model.ChannelClearingRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ChannelClearingRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChannelClearingRecordDo
	Assign(attrs ...field.AssignExpr) IChannelClearingRecordDo
	Joins(fields ...field.RelationField) IChannelClearingRecordDo
	Preload(fields ...field.RelationField) IChannelClearingRecordDo
	FirstOrInit() (*model.ChannelClearingRecord, error)
	FirstOrCreate() (*model.ChannelClearingRecord, error)
	FindByPage(offset int, limit int) (result []*model.ChannelClearingRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChannelClearingRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c channelClearingRecordDo) Debug() IChannelClearingRecordDo {
	return c.withDO(c.DO.Debug())
}

func (c channelClearingRecordDo) WithContext(ctx context.Context) IChannelClearingRecordDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c channelClearingRecordDo) ReadDB() IChannelClearingRecordDo {
	return c.Clauses(dbresolver.Read)
}

func (c channelClearingRecordDo) WriteDB() IChannelClearingRecordDo {
	return c.Clauses(dbresolver.Write)
}

func (c channelClearingRecordDo) Session(config *gorm.Session) IChannelClearingRecordDo {
	return c.withDO(c.DO.Session(config))
}

func (c channelClearingRecordDo) Clauses(conds ...clause.Expression) IChannelClearingRecordDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c channelClearingRecordDo) Returning(value interface{}, columns ...string) IChannelClearingRecordDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c channelClearingRecordDo) Not(conds ...gen.Condition) IChannelClearingRecordDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c channelClearingRecordDo) Or(conds ...gen.Condition) IChannelClearingRecordDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c channelClearingRecordDo) Select(conds ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c channelClearingRecordDo) Where(conds ...gen.Condition) IChannelClearingRecordDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c channelClearingRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IChannelClearingRecordDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c channelClearingRecordDo) Order(conds ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c channelClearingRecordDo) Distinct(cols ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c channelClearingRecordDo) Omit(cols ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c channelClearingRecordDo) Join(table schema.Tabler, on ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c channelClearingRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c channelClearingRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c channelClearingRecordDo) Group(cols ...field.Expr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c channelClearingRecordDo) Having(conds ...gen.Condition) IChannelClearingRecordDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c channelClearingRecordDo) Limit(limit int) IChannelClearingRecordDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c channelClearingRecordDo) Offset(offset int) IChannelClearingRecordDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c channelClearingRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChannelClearingRecordDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c channelClearingRecordDo) Unscoped() IChannelClearingRecordDo {
	return c.withDO(c.DO.Unscoped())
}

func (c channelClearingRecordDo) Create(values ...*model.ChannelClearingRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c channelClearingRecordDo) CreateInBatches(values []*model.ChannelClearingRecord, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c channelClearingRecordDo) Save(values ...*model.ChannelClearingRecord) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c channelClearingRecordDo) First() (*model.ChannelClearingRecord, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChannelClearingRecord), nil
	}
}

func (c channelClearingRecordDo) Take() (*model.ChannelClearingRecord, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChannelClearingRecord), nil
	}
}

func (c channelClearingRecordDo) Last() (*model.ChannelClearingRecord, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChannelClearingRecord), nil
	}
}

func (c channelClearingRecordDo) Find() ([]*model.ChannelClearingRecord, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChannelClearingRecord), err
}

func (c channelClearingRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChannelClearingRecord, err error) {
	buf := make([]*model.ChannelClearingRecord, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c channelClearingRecordDo) FindInBatches(result *[]*model.ChannelClearingRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c channelClearingRecordDo) Attrs(attrs ...field.AssignExpr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c channelClearingRecordDo) Assign(attrs ...field.AssignExpr) IChannelClearingRecordDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c channelClearingRecordDo) Joins(fields ...field.RelationField) IChannelClearingRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c channelClearingRecordDo) Preload(fields ...field.RelationField) IChannelClearingRecordDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c channelClearingRecordDo) FirstOrInit() (*model.ChannelClearingRecord, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChannelClearingRecord), nil
	}
}

func (c channelClearingRecordDo) FirstOrCreate() (*model.ChannelClearingRecord, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChannelClearingRecord), nil
	}
}

func (c channelClearingRecordDo) FindByPage(offset int, limit int) (result []*model.ChannelClearingRecord, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c channelClearingRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c channelClearingRecordDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c channelClearingRecordDo) Delete(models ...*model.ChannelClearingRecord) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *channelClearingRecordDo) withDO(do gen.Dao) *channelClearingRecordDo {
	c.DO = *do.(*gen.DO)
	return c
}
